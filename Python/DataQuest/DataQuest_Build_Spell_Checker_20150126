## DataQuest_Build_Spell_Checker_20150122

url = ("https://dataquest.io")

# You can also use ctrl+alt+r to run code. Click on the instructions panel, then type ? to see all the hotkeys.

#####################################

# Basics: Build a Spell Checker --- Final task?

#####################################

Overview of Useful code:





#####################################

#### SUMMARY OF USEFUL CODE ####




########################################################################################################################
########################################################################################################################
########################################################################################################################

#### FULL SET OF INSTRUCTIONS ####

# The stroy is in a text file. 
# So we will be reading in the file and parsing out the file.

#### Reading_the_file_in ####

# The story is stored in the file "story.txt".

# The story is stored in the "story.txt" file.
# Open the file and read the contents into the story variable.

f = open("story.txt","r")
story = f.read()

f.close


#### Tokenizing_the_file ####

# We can split strings into lists with the .split() method.
# If we use a space as the input to .split(), it will split based on the space.
text = "Bears are probably better than sharks, but I can't get close enough to one to be sure."
tokenized_text = text.split(" ")

# The story is loaded into the story variable.
# Tokenize the story, and store the tokens into the tokenized_story variable.

print(story)
tokenized_story = story.split(" ")
print(tokenized_story)


#### Replace_punctuation ####

# We can use the .replace function to replace punctuation in a string.
text = "Who really shot John F. Kennedy?"
text = text.replace("?", "?!")

# The question mark has been replaced with ?!.
print(text)

# We can replace strings with blank spaces, meaning that they are just removed.
text = text.replace("?", "")

# The question mark is gone now.
print(text)

no_punctuation_tokens = []

# Replace all of the punctuation in each of the tokens.
# You'll need to loop through tokenized_story to do so.
# You'll need to use multiple replace statements, one for each punctuation character to replace.
# Append the token to no_punctuation_tokens once you are done replacing characters.

for tokens in tokenized_story:
    tokens = tokens.replace(".", "")
    tokens = tokens.replace(",", "")
    tokens = tokens.replace("'", "")
    tokens = tokens.replace(";", "")
    tokens = tokens.replace(":", "")
    tokens = tokens.replace("\n\n", "")
    no_punctuation_tokens.append(tokens)

# Do not need to loop through each character in each token (item) in list.

print(no_punctuation_tokens)

#### Lowercasing the words ####

# We can make strings all lowercase using the .lower() method.
text = "MY CAPS LOCK IS STUCK"
text = text.lower()

# The text is much nicer to read now.
print(text)

lowercase_tokens = []

# Loop through the tokens and lowercase each one.
# Append each token to lowercase_tokens when you're done lowercasing.

for token in no_punctuation_tokens:
    token = token.lower()
    lowercase_tokens.append(token)
print(lowercase_tokens)

#### Functions ####

a = 50
b = 10
c = 80

# All in faenheight, now we want to convert to celcius.

list_celcius = [a,b,c]

for items in list_celcus:
	# do maths.

# "def" means define a new function.
# def function_name(arguements)
# return means the function will output this. (return always goes inside a function)

def convert_f_to_c(degrees):
	return (degrees - 32)/1.8

a = 50
a = convert_f_to_c(a)

# convert_f_to_c(a) calls the function and applies it the the valiable a.

# def convert(arg0,arg1,arg2)

# a = convert(arg0,arg1,arg2)

# these args correspond by index, ie by position. "Positional Argument"

#### Making_a_basic_function ####

# A simple function that takes in a number of miles, and turns it into kilometers
# The input at position 0 will be put into the miles variable.
def miles_to_km(miles):
    # return is a special keyword that indicates that the function will output whatever comes after it.
    return miles/0.62137

# Returns the number of kilometers equivalent to one mile
print(miles_to_km(1))

# Convert a from 10 miles to kilometers
a = 10
a = miles_to_km(a)

# We can convert and assign to a different variable
b = 50
c = miles_to_km(b)

fahrenheit = 80
celsius = (fahrenheit - 32)/1.8

# Define a function that takes degrees in fahrenheit as an input, and return degrees celsius

def convert(degrees_f):
    return (degrees_f - 32)/1.8
    
celsius_100 = convert(100)
celsius_150 = convert(150)

print(celsius_100)

#### Function Introduction ####

def split_string(text):
    return text.split(" ")

sally = "Sally sells seashells by the seashore."
# This splits the string into a list.
print(split_string(sally))

# We can assign the output of a function to a variable.
sally_tokens = split_string(sally)

lowercase_me = "I wish I was in ALL lowercase"

# Make a function that takes a string as input and outputs a lowercase version.
# Then use it to turn the string lowercase_me to lowercase.
# Assign the result to lowercased_string.

def lowc(any_string):
    return any_string.lower()

lowercased_string = lowc(lowercase_me)
print(lowercased_string)


#### Types of errors ####
