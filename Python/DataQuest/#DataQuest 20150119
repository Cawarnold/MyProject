#DataQuest 20150119

url = ("https://dataquest.io/mission/1")

# You can also use ctrl+alt+r to run code. Click on the instructions panel, then type ? to see all the hotkeys.

#####################################

Overview of Useful code:

Title. (searchable)
Data Types. (The_basics)
Open csv files. (Open_csv_files)
String splits. (String_split)
For Loops, lists. (For_Loops)
List of Lists. (List_of_lists)



#####################################


#### The_basics ####

# A number without decimals is an integer type.
# An integer can hold negative and positive values
# We can do do math with integers.
a = 5
b = -1
print(a * b)

# Anything enclosed in single or double quotes is a string.
# Strings hold text.
# We can't do math with strings like we can with integers.
# But there are some operations we can do (that we will learn later on).
c = "I am a string.  I do string-like things."
d = 'Also a string!'

# Floats are numbers with decimal points.
e = 5.1
f = 10.2
g = e * f

# There are other types that we will learn about later on.

h = 1
i = "hello"
j = 1.2

########

# The type function has only one input value.
a = type(5)

# The above code invokes the type function on the input 5, and as the output, we get the type of 5.
# The type is assigned to a.


# We can also invoke functions on variables.
b = "DataQuest is the best thing ever"
# Note how when the type for b is printed, it is abbreviated to str.
print(type(b))

c = type(1)
d = type("racecar")
e = type(10.6)

#### ####

# We can assign new values to existing variables.
# It doesn't matter if the new values are different types -- they will still overwrite the variable.

#### ####

# We can print out values and variables.
print(5)
a = 5
print(a)

# Notice how two lines appeared in the results area?
# We can also print some values that will take up multiple lines.
# The \n character means 'make a new line'
print("Hello.\nGoodbye.")
print("Good evening")

#### ####

# Comments aren't executed, so debug mode skips them.
# But other lines can be stepped through.
print(10)
a = 10
print(a)

c = range(0,10)
for item in c:
    print(item)


############################### Python 2 or Python 3

# The major difference that you will immediately notice between python 2 and 3 is the print function.
# The function below will work in Python 2 and 3.
print(10)

# This will only work in Python 2, and is called a print statement.
# It will cause an error in Python 3, as you can see to the right.
print 10

# For now, you don't need to worry too much about Python 2, but it's good to be aware of the differences.

################################################################################

#### Open_csv_files ####

# We can open files with the open function.
# The open function returns a file object, which we store in a variable so that we can use it later.
a = open("test.txt", "r")
print(type(a))

# We can use the .read() method to read the data in the file into a variable.

# Methods are different from functions in that they are associated with a specific object.

# We will get more into objects and classes later on, but for now, it is enough to know that methods act on objects, whereas functions are global, and unattached to any specific objects.

#### ####

# We assign the file object to the variable f.
f = open("test.txt", "r")

# We can then use the .read() method on the file object to read the contents of the file.
# Objects are code constructs that have methods that can act on them.
# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)
a = f.read()

# We can print out a.
# a is just a string -- it has the entire contents of the file test.txt.
print(a)

#####################

example_list = [index_0, index_1, index_2]

example_list[0]
>>> index_0

#### ####

# We can make an empty list with square brackets
a = []

# We can also initialize a list with values inside of it
b = [1, "I'm a string in a list!", 5.1]
c = [1,2,3]

# Make a list d that contains all integer values. 
# Make another list e containing all string values.
# Make a final list f containing all float values.

d = [1,2,3,4,5]
print(type(d))
print(type(d[0]))
e = ["a","b","c"]
print(type(e))
print(type(e[1]))
f = [1.2,1.3,1.4]
print(type(f))
print(type(f[2]))

# We can get values from lists by using an index.
sample_list = [10, "Boris Yeltsin", 50]
b = sample_list[0]

c = [1, "Mikhail Gorbachev", 10.5]

d = c[0]
e = c[1]
f = c[2]

print(d,e,f)

#### String_split ####

# The .split method takes a character as input, and then turns a string into a list of strings

# We can split a string into a list.
a_string = "This\nis\na\nstring\n"
split_string = a_string.split('\n')
print(split_string)

# Here's another example.
string_two = "How much wood\ncan a woodchuck chuck\nif a woodchuck\ncan chuck wood?"
split_string_two = string_two.split('\n')
print(split_string_two)

# Read the "crime_rates.csv" file in, split it on the newline character (\n), and store the result into the rows variable.

f = open("crime_rates.csv","r")
a = f.read()

rows = a.split('\n')

#### For_Loops ####

# We can loop over lists using the for i in the_list: notation.

# We can loop over each item in a list.
a = [5, 10, 15]
for i in a:
    print(i)

# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.

the_list = [3,5,8,10,15,17,19]

for item in the_list:
    print(item)

# We can have multiple lines underneath a for loop.
# The code above will go through the_list.
# At the end, sum will equal the sum of all of the items in the list doubled.
the_list = [3,5,8,10,15,17,19]
sum = 0
for i in the_list:
    # Double the value of i.
    double_i = i * 2
    # Add the doubled value to the sum.
    sum = sum + double_i
print(sum)

## Set the sum variable equal to the sum of all the values tripled.

the_list = [3,5,8,10,15,17,19]
sum = 0
for i in the_list:
    triple_i = i * 3
    sum = sum + triple_i
print(sum)

#### List_of_lists ####

# Create a list of lists
lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]

# We can pull out the first element of the list, which is [1,2,3].
# Since [1,2,3] is a list, we can also index it to get elements out.
a = lolists[0]
b = a[0]

value_1_0 = lolists[1][0]
print(value_1_0)
value_1_2 = lolists[1][2]
value_2_0 = lolists[2][0]
value_2_2 = lolists[2][2]











